{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_sensor_gauge = _resolveComponent(\"sensor-gauge\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sensors, sensor => {\n    return _openBlock(), _createBlock(_component_sensor_gauge, {\n      key: sensor.type,\n      title: sensor.type,\n      value: sensor.value,\n      maxValue: sensor.maxValue\n    }, null, 8 /* PROPS */, [\"title\", \"value\", \"maxValue\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","sensors","sensor","_createBlock","_component_sensor_gauge","key","type","title","value","maxValue"],"sources":["D:\\Vue\\sensor-dashboard\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <sensor-gauge v-for=\"sensor in sensors\" :key=\"sensor.type\" :title=\"sensor.type\" :value=\"sensor.value\" :maxValue=\"sensor.maxValue\"></sensor-gauge>\n  </div>\n</template>\n\n<script>\nimport SensorGauge from './components/SensorGauge.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'App',\n  components: {\n    SensorGauge\n  },\n  data() {\n    return {\n      sensors: []\n    };\n  },\n  methods: {\n    async fetchSensorData() {\n      try {\n        const response = await axios.get('http://localhost:8080/api/sensor-data');\n        this.processSensorData(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    processSensorData(data) {\n      const sensorTypes = ['TEMPERATURE', 'HUMIDITY', 'LIGHT_INTENSITY'];\n      const maxValues = {\n        'TEMPERATURE': 60,\n        'HUMIDITY': 100,\n        'LIGHT_INTENSITY': 1000\n      };\n\n      this.sensors = sensorTypes.map(type => {\n        const sensorData = data.filter(d => d.type === type);\n        const latestData = sensorData[sensorData.length - 1];\n        return {\n          type: type,\n          value: latestData ? latestData.value : 0,\n          maxValue: maxValues[type]\n        };\n      });\n    }\n  },\n  mounted() {\n    this.fetchSensorData();\n  }\n};\n</script>\n\n<style>\n#app {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CAEM,OAFNC,UAEM,I,kBADJD,mBAAA,CAAiJE,SAAA,QAFrJC,WAAA,CAEmCC,KAAA,CAAAC,OAAO,EAAjBC,MAAM;yBAA3BC,YAAA,CAAiJC,uBAAA;MAAxGC,GAAG,EAAEH,MAAM,CAACI,IAAI;MAAGC,KAAK,EAAEL,MAAM,CAACI,IAAI;MAAGE,KAAK,EAAEN,MAAM,CAACM,KAAK;MAAGC,QAAQ,EAAEP,MAAM,CAACO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}