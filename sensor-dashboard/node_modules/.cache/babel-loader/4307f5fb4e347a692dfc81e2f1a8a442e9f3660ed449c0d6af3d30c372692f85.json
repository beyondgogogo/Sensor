{"ast":null,"code":"import SensorGauge from './components/SensorGauge.vue';\nimport axios from 'axios';\nexport default {\n  name: 'App',\n  components: {\n    SensorGauge\n  },\n  data() {\n    return {\n      sensors: []\n    };\n  },\n  methods: {\n    async fetchSensorData() {\n      try {\n        const response = await axios.get('http://localhost:8080/api/sensor-data');\n        this.processSensorData(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    processSensorData(data) {\n      const sensorTypes = ['TEMPERATURE', 'HUMIDITY', 'LIGHT_INTENSITY'];\n      const maxValues = {\n        'TEMPERATURE': 60,\n        'HUMIDITY': 100,\n        'LIGHT_INTENSITY': 1000\n      };\n      this.sensors = sensorTypes.map(type => {\n        const sensorData = data.filter(d => d.type === type);\n        const latestData = sensorData[sensorData.length - 1];\n        return {\n          type: type,\n          value: latestData ? latestData.value : 0,\n          maxValue: maxValues[type]\n        };\n      });\n    }\n  },\n  mounted() {\n    this.fetchSensorData();\n  }\n};","map":{"version":3,"names":["SensorGauge","axios","name","components","data","sensors","methods","fetchSensorData","response","get","processSensorData","error","console","sensorTypes","maxValues","map","type","sensorData","filter","d","latestData","length","value","maxValue","mounted"],"sources":["D:\\Vue\\sensor-dashboard\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <sensor-gauge v-for=\"sensor in sensors\" :key=\"sensor.type\" :title=\"sensor.type\" :value=\"sensor.value\" :maxValue=\"sensor.maxValue\"></sensor-gauge>\n  </div>\n</template>\n\n<script>\nimport SensorGauge from './components/SensorGauge.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'App',\n  components: {\n    SensorGauge\n  },\n  data() {\n    return {\n      sensors: []\n    };\n  },\n  methods: {\n    async fetchSensorData() {\n      try {\n        const response = await axios.get('http://localhost:8080/api/sensor-data');\n        this.processSensorData(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    processSensorData(data) {\n      const sensorTypes = ['TEMPERATURE', 'HUMIDITY', 'LIGHT_INTENSITY'];\n      const maxValues = {\n        'TEMPERATURE': 60,\n        'HUMIDITY': 100,\n        'LIGHT_INTENSITY': 1000\n      };\n\n      this.sensors = sensorTypes.map(type => {\n        const sensorData = data.filter(d => d.type === type);\n        const latestData = sensorData[sensorData.length - 1];\n        return {\n          type: type,\n          value: latestData ? latestData.value : 0,\n          maxValue: maxValues[type]\n        };\n      });\n    }\n  },\n  mounted() {\n    this.fetchSensorData();\n  }\n};\n</script>\n\n<style>\n#app {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n</style>\n"],"mappings":"AAOA,OAAOA,WAAU,MAAO,8BAA8B;AACtD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,uCAAuC,CAAC;QACzE,IAAI,CAACC,iBAAiB,CAACF,QAAQ,CAACJ,IAAI,CAAC;MACvC,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACDD,iBAAiBA,CAACN,IAAI,EAAE;MACtB,MAAMS,WAAU,GAAI,CAAC,aAAa,EAAE,UAAU,EAAE,iBAAiB,CAAC;MAClE,MAAMC,SAAQ,GAAI;QAChB,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE,GAAG;QACf,iBAAiB,EAAE;MACrB,CAAC;MAED,IAAI,CAACT,OAAM,GAAIQ,WAAW,CAACE,GAAG,CAACC,IAAG,IAAK;QACrC,MAAMC,UAAS,GAAIb,IAAI,CAACc,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACH,IAAG,KAAMA,IAAI,CAAC;QACpD,MAAMI,UAAS,GAAIH,UAAU,CAACA,UAAU,CAACI,MAAK,GAAI,CAAC,CAAC;QACpD,OAAO;UACLL,IAAI,EAAEA,IAAI;UACVM,KAAK,EAAEF,UAAS,GAAIA,UAAU,CAACE,KAAI,GAAI,CAAC;UACxCC,QAAQ,EAAET,SAAS,CAACE,IAAI;QAC1B,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;EACDQ,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,eAAe,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}