{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nimport { defineComponent, shallowRef, ref, watch, onMounted, onBeforeUnmount, toRaw, h, isProxy } from 'vue';\nvar ChartEmits;\n(function (ChartEmits) {\n  ChartEmits[\"ChartRendered\"] = 'chart:rendered';\n  ChartEmits[\"ChartUpdated\"] = 'chart:updated';\n  ChartEmits[\"ChartDestroyed\"] = 'chart:destroyed';\n  ChartEmits[\"LabelsUpdated\"] = 'labels:updated';\n})(ChartEmits || (ChartEmits = {}));\nfunction chartCreate(createChartFunction, chartData, chartOptions, context) {\n  createChartFunction(chartData, chartOptions);\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered);\n  }\n}\nfunction chartUpdate(chart, context) {\n  chart.update();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated);\n  }\n}\nfunction chartDestroy(chart, context) {\n  chart.destroy();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed);\n  }\n}\nfunction getChartData(data, datasetIdKey) {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  };\n  setChartDatasets(nextData, {\n    ...data\n  }, datasetIdKey);\n  return nextData;\n}\nfunction getChartOptions(options, plugins) {\n  const chartOptions = options;\n  if (chartOptions !== undefined && 'plugins' in chartOptions && typeof plugins !== 'undefined' && Object.keys(plugins).length > 0) {\n    chartOptions.plugins = {\n      ...chartOptions.plugins,\n      ...plugins\n    };\n  }\n  return chartOptions;\n}\nfunction setChartDatasets(oldData, newData, datasetIdKey) {\n  const addedDatasets = [];\n  oldData.datasets = newData.datasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = oldData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return {\n        ...nextDataset\n      };\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction setChartLabels(chart, labels, context) {\n  chart.data.labels = labels;\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated);\n  }\n}\nfunction compareData(newData, oldData) {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  // Check if Labels are equal and if dataset length is equal\n  return oldData.datasets.length === newData.datasets.length && newDatasetLabels.every((value, index) => value === oldDatasetLabels[index]);\n}\nconst templateError = 'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components';\nconst generateChart = (chartId, chartType, chartController) => {\n  return defineComponent({\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Object,\n        default: () => {}\n      }\n    },\n    setup(props, context) {\n      Chart.register(chartController);\n      const _chart = shallowRef(null);\n      const canvasEl = ref(null);\n      function renderChart(data, options) {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n        if (canvasEl.value === null) {\n          throw new Error(templateError);\n        } else {\n          const chartData = getChartData(data, props.datasetIdKey);\n          const canvasEl2DContext = canvasEl.value.getContext('2d');\n          if (canvasEl2DContext !== null) {\n            _chart.value = new Chart(canvasEl2DContext, {\n              type: chartType,\n              data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n              options: getChartOptions(options, props.plugins)\n            });\n          }\n        }\n      }\n      function chartDataHandler(newValue, oldValue) {\n        const newData = isProxy(newValue) ? toRaw(newValue) : {\n          ...newValue\n        };\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : {\n          ...oldValue\n        };\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value);\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData);\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets(chart === null || chart === void 0 ? void 0 : chart.data, newData, props.datasetIdKey);\n            if (newData.labels !== undefined) {\n              setChartLabels(chart, newData.labels, context);\n            }\n            chartUpdate(chart, context);\n          } else {\n            if (chart !== null) {\n              chartDestroy(chart, context);\n            }\n            chartCreate(renderChart, props.chartData, props.chartOptions, context);\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy(toRaw(_chart.value), context);\n          }\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      }\n      watch(() => props.chartData, (newValue, oldValue) => chartDataHandler(newValue, oldValue), {\n        deep: true\n      });\n      onMounted(() => {\n        if ('datasets' in props.chartData && props.chartData.datasets.length > 0) {\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      });\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n      });\n      return () => h('div', {\n        style: props.styles,\n        class: props.cssClasses\n      }, [h('canvas', {\n        id: props.chartId,\n        width: props.width,\n        height: props.height,\n        ref: canvasEl\n      })]);\n    }\n  });\n};\nconst Bar = /* #__PURE__ */generateChart('bar-chart', 'bar', BarController);\nconst Doughnut = /* #__PURE__ */generateChart('doughnut-chart', 'doughnut', DoughnutController);\nconst Line = /* #__PURE__ */generateChart('line-chart', 'line', LineController);\nconst Pie = /* #__PURE__ */generateChart('pie-chart', 'pie', PieController);\nconst PolarArea = /* #__PURE__ */generateChart('polar-chart', 'polarArea', PolarAreaController);\nconst Radar = /* #__PURE__ */generateChart('radar-chart', 'radar', RadarController);\nconst Bubble = /* #__PURE__ */generateChart('bubble-chart', 'bubble', BubbleController);\nconst Scatter = /* #__PURE__ */generateChart('scatter-chart', 'scatter', ScatterController);\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, generateChart };","map":{"version":3,"names":["ChartEmits","chartCreate","createChartFunction","chartData","chartOptions","context","undefined","emit","ChartRendered","chartUpdate","chart","update","ChartUpdated","chartDestroy","destroy","ChartDestroyed","getChartData","data","datasetIdKey","nextData","labels","datasets","setChartDatasets","getChartOptions","options","plugins","Object","keys","length","oldData","newData","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","assign","setChartLabels","LabelsUpdated","compareData","newDatasetLabels","label","oldDatasetLabels","every","value","index","templateError","generateChart","chartId","chartType","chartController","defineComponent","props","type","required","default","String","width","Number","height","cssClasses","styles","setup","Chart","register","_chart","shallowRef","canvasEl","ref","renderChart","toRaw","Error","canvasEl2DContext","getContext","isProxy","Proxy","chartDataHandler","newValue","oldValue","isEqualLabelsAndDatasetsLength","watch","deep","onMounted","onBeforeUnmount","h","style","class","id","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/utils.ts","../src/BaseCharts.ts"],"sourcesContent":["import type {\n  ChartType,\n  ChartDataset,\n  DefaultDataPoint,\n  PluginOptionsByType\n} from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function getChartOptions<TType extends ChartType = ChartType>(\n  options?: TChartOptions<TType>,\n  plugins?: PluginOptionsByType<TType>\n): TChartOptions<TType> | undefined {\n  const chartOptions = options\n\n  if (\n    chartOptions !== undefined &&\n    'plugins' in chartOptions &&\n    typeof plugins !== 'undefined' &&\n    Object.keys(plugins).length > 0\n  ) {\n    chartOptions.plugins = {\n      ...chartOptions.plugins,\n      ...plugins\n    }\n  }\n\n  return chartOptions\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n","import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport type {\n  ChartType,\n  ChartComponentLike,\n  DefaultDataPoint,\n  PluginOptionsByType,\n  ChartOptions\n} from 'chart.js'\n\nimport {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  isProxy,\n  toRaw,\n  PropType\n} from 'vue'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartOptions,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError\n} from './utils'\n\nimport type {\n  TChartData,\n  TChartOptions,\n  TypedChartJS,\n  TypedChartComponent\n} from './types'\n\nexport const generateChart = <\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chartId: string,\n  chartType: TType,\n  chartController: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> =>\n  defineComponent({\n    props: {\n      chartData: {\n        type: Object as PropType<TChartData<TType, TData, TLabel>>,\n        required: true\n      },\n      chartOptions: {\n        type: Object as PropType<TChartOptions<TType>>,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object as PropType<Partial<CSSStyleDeclaration>>,\n        default: () => {}\n      },\n      plugins: {\n        type: Object as PropType<PluginOptionsByType<TType>>,\n        default: () => {}\n      }\n    },\n    setup(props, context) {\n      ChartJS.register(chartController)\n\n      const _chart = shallowRef<TypedChartJS<TType, TData, TLabel> | null>(null)\n      const canvasEl = ref<HTMLCanvasElement | null>(null)\n\n      function renderChart(\n        data: TChartData<TType, TData, TLabel>,\n        options: TChartOptions<TType>\n      ): void {\n        if (_chart.value !== null) {\n          chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData<TType, TData, TLabel>(\n            data,\n            props.datasetIdKey\n          )\n          const canvasEl2DContext = canvasEl.value.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new ChartJS<TType, TData, TLabel>(\n              canvasEl2DContext,\n              {\n                type: chartType,\n                data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n                options: getChartOptions<TType>(options, props.plugins)\n              }\n            )\n          }\n        }\n      }\n\n      function chartDataHandler(\n        newValue: TChartData<TType, TData, TLabel>,\n        oldValue: TChartData<TType, TData, TLabel>\n      ): void {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue }\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue }\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value)\n\n          const isEqualLabelsAndDatasetsLength = compareData<\n            TType,\n            TData,\n            TLabel\n          >(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets<TType, TData, TLabel>(\n              chart?.data,\n              newData,\n              props.datasetIdKey\n            )\n\n            if (newData.labels !== undefined) {\n              setChartLabels<TType, TData, TLabel>(\n                chart,\n                newData.labels,\n                context\n              )\n            }\n\n            chartUpdate<TType, TData, TLabel>(chart, context)\n          } else {\n            if (chart !== null) {\n              chartDestroy<TType, TData, TLabel>(chart, context)\n            }\n\n            chartCreate<TType, TData, TLabel>(\n              renderChart,\n              props.chartData,\n              props.chartOptions as ChartOptions<TType>,\n              context\n            )\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n          }\n\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      watch(\n        () => props.chartData,\n        (\n          newValue: TChartData<TType, TData, TLabel>,\n          oldValue: TChartData<TType, TData, TLabel>\n        ) => chartDataHandler(newValue, oldValue),\n        { deep: true }\n      )\n\n      onMounted(() => {\n        if (\n          'datasets' in props.chartData &&\n          props.chartData.datasets.length > 0\n        ) {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      })\n\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context)\n        }\n      })\n\n      return () =>\n        h('div', { style: props.styles, class: props.cssClasses }, [\n          h('canvas', {\n            id: props.chartId,\n            width: props.width,\n            height: props.height,\n            ref: canvasEl\n          })\n        ])\n    }\n  }) as any\n\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Bubble,\n  Scatter\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}